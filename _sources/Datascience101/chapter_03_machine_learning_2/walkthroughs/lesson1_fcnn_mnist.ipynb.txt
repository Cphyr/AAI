{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Lesson 1: MNIST Classification using Fully Connected Neural Networks"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introduction"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "MNIST is a simple computer vision dataset. It consists of 28x28 pixel images of handwritten digits. The dataset also includes labels for each image, telling us which digit it is (0, 1, 2, ..., 9).\n",
    "\n",
    "In this notebook, we will use the MNIST dataset to train a simple neural network to classify the images. We will use the PyTorch library to build a simple fully connected neural network and train it on the dataset.\n",
    "\n",
    "The notebook is divided into the following sections:\n",
    "1. Importing the libraries\n",
    "2. Loading the dataset\n",
    "3. Preparing the dataset\n",
    "4. Building the neural network\n",
    "5. Training the model\n",
    "6. Evaluating the model\n",
    "7. Reloading the model and making predictions\n",
    "\n",
    "Throughout the notebook, you will see '#TODO' comments. These are placeholders for you to write your own code. You should write the code to complete the functionality of the neural network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "import torch\n",
    "import torch.nn as nn\n",
    "import torchvision\n",
    "import torchvision.transforms as transforms\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "from tqdm import tqdm\n",
    "import os"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hyperparameters"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Determine if a GPU is available, and use it if so\n",
    "# we will use it to train our model, if not we will use the CPU\n",
    "device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [],
   "source": [
    "input_size = 784  # MNIST data is 28x28 pixels\n",
    "hidden_size = 500  # number of nodes in the hidden layer\n",
    "num_classes = 10  # number of output classes (0-9)\n",
    "num_epochs = 5  # number of times we will loop through the entire dataset\n",
    "batch_size = 100  # number of images to process at once\n",
    "learning_rate = 0.001  # how much we update our weights each iteration"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## MNIST"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Load MNIST"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first step is to load the MNIST dataset. We will use the `tensorflow_datasets` library to load the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create datasets folder\n",
    "os.makedirs(\"../datasets\", exist_ok=True)\n",
    "# MNIST dataset\n",
    "train_dataset = torchvision.datasets.MNIST(\n",
    "    root=\"../datasets\", train=True, transform=transforms.ToTensor(), download=True\n",
    ")\n",
    "\n",
    "test_dataset = torchvision.datasets.MNIST(\n",
    "    root=\"../datasets\", train=False, transform=transforms.ToTensor()\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After downloading the dataset, we will use torch dataloaders to load the data.\n",
    "Dataloader is a utility that helps us to load the data in batches and also shuffle the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data loader\n",
    "train_loader = torch.utils.data.DataLoader(\n",
    "    dataset=train_dataset, batch_size=batch_size, shuffle=True\n",
    ")\n",
    "\n",
    "test_loader = torch.utils.data.DataLoader(\n",
    "    dataset=test_dataset, batch_size=batch_size, shuffle=False\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Visualize MNIST"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaAAAAGdCAYAAABU0qcqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAbp0lEQVR4nO3df2xV9f3H8dcF6aVoadeW9vaOgi3yQyl0GUrXqHxRGkpdiGjn/PUHGAPRtWbQOU0XFXVLumGiRtPhPxNmIv7aBCZTFqy2jbNlASWMuDW0dlJCb1EyWijQlvbz/YN454Uinsu9fbfl+UhOQu89756Pxxufnt7bg8855wQAwBAbY70AAMCliQABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATl1kv4GwDAwM6dOiQkpKS5PP5rJcDAPDIOadjx44pGAxqzJjzX+cMuwAdOnRI2dnZ1ssAAFyktrY2TZ48+bzPD7sAJSUlSZLWrFkjv99vvBoAgFc9PT167rnnwv89P5+4Bai6ulrPPPOMQqGQ8vPz9eKLL2r+/PkXnPv6x25+v58AAcAIdqG3UeLyIYQ33nhDFRUVWrt2rT755BPl5+eruLhYhw8fjsfhAAAjUFwC9Oyzz2rlypW67777dM011+ill17ShAkT9PLLL8fjcACAESjmAert7dXu3btVVFT0v4OMGaOioiI1NDScs39PT4+6uroiNgDA6BfzAH311Vfq7+9XZmZmxOOZmZkKhULn7F9VVaXk5OTwxifgAODSYP6LqJWVlers7AxvbW1t1ksCAAyBmH8KLj09XWPHjlVHR0fE4x0dHQoEAufsz6fdAODSFPMroISEBM2bN081NTXhxwYGBlRTU6PCwsJYHw4AMELF5feAKioqtHz5cl177bWaP3++nn/+eXV3d+u+++6Lx+EAACNQXAJ055136ssvv9QTTzyhUCikH/zgB9q+ffs5H0wAAFy64nYnhPLycpWXl8fr2wMARjjzT8EBAC5NBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAICJuN2MFMClxefzeZ655ZZbPM9cc801nmf+/Oc/e56RpM8//zyqOXw3XAEBAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABHfDBhATeXl5nmeuvfZazzPOOc8z0dypG/HHFRAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIKbkQI4R0ZGhueZm2++OQ4rOdcnn3zieaalpSUOK8HF4goIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADDBzUiBUSwpKSmqucWLF3ueSUlJ8Tzz2WefeZ557733PM9geOIKCABgggABAEzEPEBPPvmkfD5fxDZr1qxYHwYAMMLF5T2g2bNn6/333//fQS7jrSYAQKS4lOGyyy5TIBCIx7cGAIwScXkPaP/+/QoGg8rNzdW9996rAwcOnHffnp4edXV1RWwAgNEv5gEqKCjQxo0btX37dq1fv16tra268cYbdezYsUH3r6qqUnJycnjLzs6O9ZIAAMNQzANUUlKiO+64Q3PnzlVxcbHeffddHT16VG+++eag+1dWVqqzszO8tbW1xXpJAIBhKO6fDkhJSdGMGTPU3Nw86PN+v19+vz/eywAADDNx/z2g48ePq6WlRVlZWfE+FABgBIl5gB5++GHV1dXpP//5jz7++GPddtttGjt2rO6+++5YHwoAMILF/EdwBw8e1N13360jR45o0qRJuuGGG9TY2KhJkybF+lAAgBEs5gF6/fXXY/0tAUgaM8b7DyxKSkqiOta0adM8z7S3t3ue2bx5s+eZ/v5+zzMYnrgXHADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgIu5/IR0wkkRzw8/p06d7nmlqavI8k5eX53nm6quv9jwjSQMDA55n/vKXv3ieOX36tOcZjB5cAQEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEd8MGviEYDHqe6e3t9Twza9YszzNLly71PBPNXa0lqa6uzvNMKBSK6li4dHEFBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCY4GakwDckJiZ6nhk7dqznmdLSUs8zPp/P88w777zjeUaS9uzZE9Uc4AVXQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACW5GCnxDf3+/55mf/vSnnmeiubFofX295xluKorhjCsgAIAJAgQAMOE5QPX19Vq6dKmCwaB8Pp+2bNkS8bxzTk888YSysrKUmJiooqIi7d+/P1brBQCMEp4D1N3drfz8fFVXVw/6/Lp16/TCCy/opZde0s6dO3X55ZeruLhYp06duujFAgBGD88fQigpKVFJScmgzznn9Pzzz+uxxx7TrbfeKkl65ZVXlJmZqS1btuiuu+66uNUCAEaNmL4H1NraqlAopKKiovBjycnJKigoUENDw6AzPT096urqitgAAKNfTAMUCoUkSZmZmRGPZ2Zmhp87W1VVlZKTk8NbdnZ2LJcEABimzD8FV1lZqc7OzvDW1tZmvSQAwBCIaYACgYAkqaOjI+Lxjo6O8HNn8/v9mjhxYsQGABj9YhqgnJwcBQIB1dTUhB/r6urSzp07VVhYGMtDAQBGOM+fgjt+/Liam5vDX7e2tmrPnj1KTU3VlClTtHr1av3mN7/R9OnTlZOTo8cff1zBYFDLli2L5boBACOc5wDt2rVLN910U/jriooKSdLy5cu1ceNGPfLII+ru7taqVat09OhR3XDDDdq+fbvGjx8fu1UDAEY8zwFauHChnHPnfd7n8+npp5/W008/fVELAy5GWlpaVHO33Xab55nLLvN+T99obhIazc1IgeHM/FNwAIBLEwECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEx4v40vMMSuvPJKzzM/+clPojrW5Zdf7nnm7L8B+Lv461//6nkGGG24AgIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATHAzUgypxMREzzN33HGH55kJEyZ4npGkffv2eZ557733PM+cPn3a88ykSZM8z8yYMcPzjCR1d3d7nklLS4vqWF598cUXnmeam5vjsBJcLK6AAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAAT3IwUQ+rGG2/0PBPNjUW//PJLzzOStHXrVs8zPp/P88yKFSs8z2RmZnqeGT9+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eTE3MDCg1atX6/rrr1deXp6kM6+HhIQEpaSkROw7ml8Pg50HSbrnnns0depUBYNB7d27V48++qiampr09ttvG6420rAPEP6npKQk/Oe5c+eqoKBAU6dO1Ztvvqn777/fcGUYDu66667wn+fMmaO5c+dq2rRpqq2t1aJFiwxXFh9lZWXat2/fJfE+6Lc533lYtWpV+M9z5sxRVlaWFi1apJaWFk2bNm2olzmoYf8juPT0dI0dO/acT7F0dHQoEAgYrWp4SElJ0YwZM9Tc3Gy9FDNfvwZ4fZwrNzdX6enpo/L1UV5erm3btunDDz+M+OtbAoGAent7dfTo0Yj9R+vr4XznYTAFBQWSNKxeD8M+QAkJCZo3b55qamrCjw0MDKimpkaFhYWGK7N3/PhxtbS0KCsry3opZnJychQIBCJeH11dXdq5c+cl//o4ePCgjhw5MqpeH845lZeXa/Pmzfrggw+Uk5MT8fy8efM0bty4iNdDU1OTDhw4MKpeDxc6D4PZs2ePJA2v14P1pyC+i9dff935/X63ceNG99lnn7lVq1a5lJQUFwqFrJc2pH7xi1+42tpa19ra6v7+97+7oqIil56e7g4fPmy9tLg6duyY+/TTT92nn37qJLlnn33Wffrpp+6LL75wzjn329/+1qWkpLitW7e6vXv3ultvvdXl5OS4kydPGq88tr7tPBw7dsw9/PDDrqGhwbW2trr333/f/fCHP3TTp093p06dsl56zDz44IMuOTnZ1dbWuvb29vB24sSJ8D4PPPCAmzJlivvggw/crl27XGFhoSssLDRcdexd6Dw0Nze7p59+2u3atcu1tra6rVu3utzcXLdgwQLjlUcaEQFyzrkXX3zRTZkyxSUkJLj58+e7xsZG6yUNuTvvvNNlZWW5hIQE9/3vf9/deeedrrm52XpZcffhhx86Sedsy5cvd86d+Sj2448/7jIzM53f73eLFi1yTU1NtouOg287DydOnHCLFy92kyZNcuPGjXNTp051K1euHHX/kzbYP78kt2HDhvA+J0+edD/72c/c9773PTdhwgR32223ufb2drtFx8GFzsOBAwfcggULXGpqqvP7/e6qq65yv/zlL11nZ6ftws/CX8cAADAx7N8DAgCMTgQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACAif8Hqp2Yj9eTpKgAAAAASUVORK5CYII=",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "## Visualize MNIST\n",
    "# functions to show an image\n",
    "def imshow(img):\n",
    "    img = img / 2 + 0.5  # unnormalize\n",
    "    npimg = img.numpy()\n",
    "    plt.imshow(np.transpose(npimg, (1, 2, 0)))\n",
    "    plt.show()\n",
    "\n",
    "\n",
    "for _ in range(3):\n",
    "    image, _ = train_dataset[np.random.randint(0, len(train_dataset))]\n",
    "    imshow(torchvision.utils.make_grid(image))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Data Augmentation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# TODO:\n",
    "# Watch this very short (it's literally a YouTube Short) video about data augmentation: https://www.youtube.com/shorts/S-7LpWzUaOg\n",
    "# Read about data augmentation for images in PyTorch: https://www.kaggle.com/code/mohamedmustafa/7-data-augmentation-on-images-using-pytorch\n",
    "# Add data augmentation to the MNIST dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Neural Network"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [],
   "source": [
    "class Net(nn.Module):  # inherit from nn.Module\n",
    "    def __init__(self, input_size, hidden_size, num_classes):\n",
    "        super(Net, self).__init__()  # call the constructor of the parent class\n",
    "\n",
    "        self.fc1 = nn.Linear(input_size, hidden_size)  # first fully connected layer\n",
    "        self.relu = nn.ReLU()  # activation function\n",
    "\n",
    "        # TODO:\n",
    "        # 1. Add a second fully connected layer (don't forget to add an activation function).\n",
    "        # 2. (Optional) Experiment with different activation functions,\n",
    "        # such as sigmoid, tanh, leaky relu and parametric relu.\n",
    "\n",
    "        self.fc2 = nn.Linear(hidden_size, num_classes)  # second fully connected layer\n",
    "\n",
    "        # softmax is used for multi-class classification problems\n",
    "        # it converts the output to a probability distribution over the classes\n",
    "        # the class with the highest probability is the predicted class\n",
    "        # logsoftmax is used to improve numerical stability\n",
    "        self.logsoftmax = nn.LogSoftmax(dim=1)\n",
    "\n",
    "    def forward(self, x: torch.Tensor) -> torch.Tensor:\n",
    "        \"\"\"\n",
    "        :param x: input tensor (batch_size, input_size)\n",
    "        \"\"\"\n",
    "        x = self.fc1(x)\n",
    "        x = self.relu(x)\n",
    "        x = self.fc2(x)\n",
    "        x = self.logsoftmax(x)\n",
    "\n",
    "        return x"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "$$\n",
    "[LogSoftmax(x)]_i = \\log\\left(\\frac{\\exp(x_i)}{\\sum_j \\exp(x_j)}\\right)    \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Initialization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create the model and move it to the GPU if available\n",
    "model = Net(input_size, hidden_size, num_classes).to(device)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "# loss function\n",
    "# we usually use cross-entropy loss for classification problems\n",
    "# it applies log softmax to the output and then applies negative log likelihood loss\n",
    "# in our model, we apply logsoftmax in the forward method, so we don't\n",
    "# the loss function to do it.\n",
    "# Thence, instead of using nn.CrossEntropyLoss, we use nn.NLLLoss\n",
    "\n",
    "# simply,\n",
    "# * If we apply logsoftmax in the forward method, we use nn.NLLLoss\n",
    "# * If we don't apply logsoftmax in the forward method, we use nn.CrossEntropyLoss\n",
    "\n",
    "\n",
    "criterion = nn.NLLLoss()  # negative log likelihood loss\n",
    "\n",
    "# optimizer\n",
    "# we use the Adam optimizer, it is a popular optimizer\n",
    "# it is an extension to stochastic gradient descent\n",
    "# it computes adaptive learning rates for each parameter\n",
    "optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training the Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Epoch [1/5], Step [600/600], Loss: 0.1293: 100%|██████████| 600/600 [00:03<00:00, 184.70it/s]\n",
      "Epoch [2/5], Step [600/600], Loss: 0.0418: 100%|██████████| 600/600 [00:03<00:00, 184.13it/s]\n",
      "Epoch [3/5], Step [600/600], Loss: 0.0595: 100%|██████████| 600/600 [00:03<00:00, 183.74it/s]\n",
      "Epoch [4/5], Step [600/600], Loss: 0.0224: 100%|██████████| 600/600 [00:03<00:00, 186.07it/s]\n",
      "Epoch [5/5], Step [600/600], Loss: 0.0529: 100%|██████████| 600/600 [00:03<00:00, 184.28it/s]\n"
     ]
    }
   ],
   "source": [
    "# Training loop\n",
    "total_step = len(train_loader)\n",
    "for epoch in range(num_epochs):\n",
    "    # Initialize progress bar\n",
    "    progress_bar = tqdm(enumerate(train_loader), total=total_step, leave=True)\n",
    "\n",
    "    for i, (images, labels) in progress_bar:\n",
    "        # Move tensors to the configured device\n",
    "        images = images.reshape(-1, 28 * 28).to(device)  # flatten the images\n",
    "        # flatten the images to be (batch_size, 28*28)\n",
    "        # this is important because FCNNs take a 1D tensor as input\n",
    "\n",
    "        labels = labels.to(device)\n",
    "\n",
    "        # Forward pass\n",
    "        outputs = model(images)\n",
    "        loss = criterion(outputs, labels)\n",
    "\n",
    "        # Backpropagation and optimization\n",
    "        optimizer.zero_grad()\n",
    "        loss.backward()\n",
    "        optimizer.step()\n",
    "\n",
    "        # Update progress bar description\n",
    "        progress_bar.set_description(\n",
    "            f\"Epoch [{epoch+1}/{num_epochs}], Step [{i+1}/{total_step}], Loss: {loss.item():.4f}\"\n",
    "        )"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See how the model performs better as it trains for more epochs."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of the network on the 10000 test images: 97.85%\n"
     ]
    }
   ],
   "source": [
    "# Test the model\n",
    "# In the test phase, we don't need to compute gradients (for memory efficiency)\n",
    "with torch.no_grad():\n",
    "    correct = 0\n",
    "    total = 0\n",
    "    for images, labels in test_loader:\n",
    "        images = images.reshape(-1, 28 * 28).to(device)\n",
    "        labels = labels.to(device)\n",
    "        outputs = model(images)\n",
    "        _, predicted = torch.max(outputs.data, 1)\n",
    "        total += labels.size(0)\n",
    "        correct += (predicted == labels).sum().item()\n",
    "\n",
    "    print(\n",
    "        \"Accuracy of the network on the 10000 test images: {:.2f}%\".format(\n",
    "            100 * correct / total\n",
    "        )\n",
    "    )\n",
    "\n",
    "\n",
    "# Save the model checkpoint\n",
    "os.makedirs(\"../saved_models\", exist_ok=True)\n",
    "torch.save(model.state_dict(), \"../saved_models/mnist_fcn_model.ckpt\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Reloading the Model and Making Predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<All keys matched successfully>"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "model = Net(input_size, hidden_size, num_classes).to(device)\n",
    "model.load_state_dict(torch.load(\"../saved_models/mnist_fcn_model.ckpt\"))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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585VR0dHaJ81a9bos88+07Zt21RVVaUzZ87o6aefjvrgAID+zdObEHbv3h32cXl5uVJTU1VTU6NZs2apra1Nf/rTn7Rp0yY9+eSTkqSNGzdq0qRJOnjwoH70ox9Fb3IAQL92T98DamtrkyQlJydLkmpqatTV1aW8vLzQPhMnTtTo0aNVXV3d4+fo7OxUe3t72AYAiH8RB6i7u1urV6/WjBkzNHnyZElSc3OzEhISbvl992lpaWpubu7x85SWlioQCIS2zMzMSEcCAPQjEQeosLBQx48f15YtW+5pgJKSErW1tYW2xsbGe/p8AID+IaIfRC0qKtKuXbt04MABjRo1KvR4MBjUtWvX1NraGnYV1NLSomAw2OPn8vv98vv9kYwBAOjHPF0BOedUVFSk7du3a9++fcrKygp7ftq0aRo0aJAqKipCj9XW1urUqVPKzc2NzsQAgLjg6QqosLBQmzZt0s6dO5WYmBj6vk4gENCQIUMUCAT04osvqri4WMnJyRo+fLheeukl5ebm8g44AEAYTwHasGGDJGn27Nlhj2/cuFHLli2TJL377rsaMGCAFi1apM7OTuXn5+uPf/xjVIYFAMQPTwFyzt11n8GDB6usrExlZWURD4X+4Zuf9fJi0qRJntds377d85qUlBTPayRp5syZvfJaPp/P85pv89/fzbq6ujyvkaStW7dGtA7wgnvBAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwEREvxEV8WXkyJERrYvkztGR3NF5+fLlvfI6Uu/dpToS586d87wm0rtanz9/PqJ1gBdcAQEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJrgZKSK6yaUkXb582fOaoUOHel4TyQ1CI9Vbr9XW1uZ5TXl5uec1kfw7AnoLV0AAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAluRoqI7dmzx/OaRx991POaYcOGeV4zYsQIz2skafv27Z7XRHIz166uLs9ruLEo4g1XQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACW5Giogd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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Predicted: 3, Actual: 3\n"
     ]
    }
   ],
   "source": [
    "# Sample inference\n",
    "image, label = test_dataset[np.random.randint(0, len(test_dataset))]\n",
    "image = image.reshape(-1, 28 * 28).to(device)\n",
    "output = model(image)\n",
    "_, predicted = torch.max(output, 1)\n",
    "# show image\n",
    "imshow(torchvision.utils.make_grid(image.cpu().reshape(1, 1, 28, 28)))\n",
    "print(f\"Predicted: {predicted.item()}, Actual: {label}\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
